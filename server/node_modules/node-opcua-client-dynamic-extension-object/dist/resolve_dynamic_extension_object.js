"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveDynamicExtensionObject = void 0;
const node_opcua_binary_stream_1 = require("node-opcua-binary-stream");
const node_opcua_extension_object_1 = require("node-opcua-extension-object");
const node_opcua_variant_1 = require("node-opcua-variant");
const node_opcua_debug_1 = require("node-opcua-debug");
function resolveDynamicExtensionObjectV(opaque, dataTypeManager) {
    var _a, _b;
    try {
        const Constructor = dataTypeManager.getExtensionObjectConstructorFromBinaryEncoding(opaque.nodeId);
        const object = new Constructor();
        const stream = new node_opcua_binary_stream_1.BinaryStream(opaque.buffer);
        try {
            object.decode(stream);
            return object;
        }
        catch (err) {
            // tslint:disable-next-line:no-console
            console.log("Constructor = ", Constructor.name);
            // tslint:disable-next-line:no-console
            console.log("opaqueStructure = ", (_a = opaque === null || opaque === void 0 ? void 0 : opaque.nodeId) === null || _a === void 0 ? void 0 : _a.toString());
            // tslint:disable-next-line:no-console
            console.log("opaqueStructure = ", "0x" + ((_b = opaque === null || opaque === void 0 ? void 0 : opaque.buffer) === null || _b === void 0 ? void 0 : _b.toString("hex")));
            // tslint:disable-next-line: no-console
            console.log(node_opcua_debug_1.hexDump(opaque.buffer));
            // tslint:disable-next-line:no-console
            console.log("resolveDynamicExtensionObjectV err = ", err);
            // try again for debugging
            object.decode(stream);
            return opaque;
        }
    }
    catch (err) {
        console.log("err", err);
        // tslint:disable-next-line:no-console
        console.log("opaqueStructure = ", opaque.nodeId.toString());
        // tslint:disable-next-line:no-console
        console.log("opaqueStructure = ", "0x" + opaque.buffer.toString("hex"));
        // tslint:disable-next-line: no-console
        console.log(node_opcua_debug_1.hexDump(opaque.buffer));
        console.log(dataTypeManager.toString());
        throw err;
    }
}
function resolveDynamicExtensionObject(variant, dataTypeManager) {
    if (variant.dataType !== node_opcua_variant_1.DataType.ExtensionObject) {
        return;
    }
    if (variant.arrayType !== node_opcua_variant_1.VariantArrayType.Scalar) {
        if (variant.value instanceof Array) {
            variant.value = variant.value.map((v) => {
                const obj = v instanceof node_opcua_extension_object_1.OpaqueStructure ? resolveDynamicExtensionObjectV(v, dataTypeManager) : v;
                return obj;
            });
        }
        return;
    }
    if (!(variant.value instanceof node_opcua_extension_object_1.OpaqueStructure)) {
        return;
    }
    variant.value = resolveDynamicExtensionObjectV(variant.value, dataTypeManager);
}
exports.resolveDynamicExtensionObject = resolveDynamicExtensionObject;
//# sourceMappingURL=resolve_dynamic_extension_object.js.map